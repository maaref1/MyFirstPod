//
// AccountsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class AccountsAPI: APIBase {
    /**
     Ajoute le role vie a une espace client
     - parameter idAccount: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addRole(idAccount: String, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        addRoleWithRequestBuilder(idAccount: idAccount).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Ajoute le role vie a une espace client
     - PUT /api/accounts/{idAccount}/role/vie
     - 

     - parameter idAccount: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func addRoleWithRequestBuilder(idAccount: String) -> RequestBuilder<Void> {
        var path = "/api/accounts/{idAccount}/role/vie"
        path = path.replacingOccurrences(of: "{idAccount}", with: "\(idAccount)", options: .literal, range: nil)
        let URLString = AuthentAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = AuthentAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Récupére l'état du compte
     - parameter idAccount: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createSimulations(idAccount: String, completion: @escaping ((_ data: AccountStateOutput?, _ error: ErrorResponse?) -> Void)) {
        createSimulationsWithRequestBuilder(idAccount: idAccount).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Récupére l'état du compte
     - GET /api/accounts/{idAccount}/state
     - 

     - examples: [{contentType=application/json, example={
  "typeIdentifiant" : "typeIdentifiant"
}}]
     - parameter idAccount: (path)  
     - returns: RequestBuilder<AccountStateOutput> 
     */
    open class func createSimulationsWithRequestBuilder(idAccount: String) -> RequestBuilder<AccountStateOutput> {
        var path = "/api/accounts/{idAccount}/state"
        path = path.replacingOccurrences(of: "{idAccount}", with: "\(idAccount)", options: .literal, range: nil)
        let URLString = AuthentAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AccountStateOutput>.Type = AuthentAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Récupérer les identiefiants d'un compte
     - parameter idAccount: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAccountCredentials(idAccount: String, completion: @escaping ((_ data: [IdentifiantOutput]?, _ error: ErrorResponse?) -> Void)) {
        getAccountCredentialsWithRequestBuilder(idAccount: idAccount).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Récupérer les identiefiants d'un compte
     - GET /api/accounts/{idAccount}/ids
     - Récupère la liste des identifiants de connexion associés au compte du client.

     - examples: [{contentType=application/json, example=[ {
  "moyenCom" : [ {
    "typeIdentifiant" : "typeIdentifiant",
    "valeur" : "valeur",
    "cleSI" : "cleSI"
  }, {
    "typeIdentifiant" : "typeIdentifiant",
    "valeur" : "valeur",
    "cleSI" : "cleSI"
  } ]
}, {
  "moyenCom" : [ {
    "typeIdentifiant" : "typeIdentifiant",
    "valeur" : "valeur",
    "cleSI" : "cleSI"
  }, {
    "typeIdentifiant" : "typeIdentifiant",
    "valeur" : "valeur",
    "cleSI" : "cleSI"
  } ]
} ]}]
     - parameter idAccount: (path)  
     - returns: RequestBuilder<[IdentifiantOutput]> 
     */
    open class func getAccountCredentialsWithRequestBuilder(idAccount: String) -> RequestBuilder<[IdentifiantOutput]> {
        var path = "/api/accounts/{idAccount}/ids"
        path = path.replacingOccurrences(of: "{idAccount}", with: "\(idAccount)", options: .literal, range: nil)
        let URLString = AuthentAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[IdentifiantOutput]>.Type = AuthentAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Reserve identifiant pour un client
     - parameter idAccount: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAccountId(idAccount: String, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        getAccountIdWithRequestBuilder(idAccount: idAccount).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Reserve identifiant pour un client
     - PUT /api/accounts/{idAccount}/ids
     - 

     - parameter idAccount: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func getAccountIdWithRequestBuilder(idAccount: String) -> RequestBuilder<Void> {
        var path = "/api/accounts/{idAccount}/ids"
        path = path.replacingOccurrences(of: "{idAccount}", with: "\(idAccount)", options: .literal, range: nil)
        let URLString = AuthentAPIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = AuthentAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
