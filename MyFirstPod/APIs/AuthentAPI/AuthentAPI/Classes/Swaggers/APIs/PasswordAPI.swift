//
// PasswordAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class PasswordAPI: APIBase {
    /**
     Validite mot de passe
     - parameter idAccount: (path)  
     - parameter passwordInput: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func checkPassword(idAccount: String, passwordInput: PasswordInput, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        checkPasswordWithRequestBuilder(idAccount: idAccount, passwordInput: passwordInput).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Validite mot de passe
     - POST /api/accounts/{idAccount}/password-rules
     - Vérifie la validité d'un mot de passe saisi

     - parameter idAccount: (path)  
     - parameter passwordInput: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func checkPasswordWithRequestBuilder(idAccount: String, passwordInput: PasswordInput) -> RequestBuilder<Void> {
        var path = "/api/accounts/{idAccount}/password-rules"
        path = path.replacingOccurrences(of: "{idAccount}", with: "\(idAccount)", options: .literal, range: nil)
        let URLString = AuthentAPIAPI.basePath + path
        let parameters = passwordInput.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = AuthentAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Verifie le mot de passe
     - parameter passwordInput: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func login(passwordInput: LoginInput, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        loginWithRequestBuilder(passwordInput: passwordInput).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Verifie le mot de passe
     - POST /api/accounts/password
     - Vérifie le mot de passe dans le cadre de la connexion à un espace client. Au bout de 3 essais infructueux, le compte est bloqué.

     - parameter passwordInput: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func loginWithRequestBuilder(passwordInput: LoginInput) -> RequestBuilder<Void> {
        let path = "/api/accounts/password"
        let URLString = AuthentAPIAPI.basePath + path
        let parameters = passwordInput.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = AuthentAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Modifier mot de passe
     - parameter idAccount: (path)  
     - parameter passwordInput: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updatePassword(idAccount: String, passwordInput: UpdatePasswordInput, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        updatePasswordWithRequestBuilder(idAccount: idAccount, passwordInput: passwordInput).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Modifier mot de passe
     - PUT /api/accounts/{idAccount}/password
     - Modifie un mot de passe suite à validation d'un code OTP/mot de passe temporaire, ou d'un changement de mot de passe à l'initiative du client.

     - parameter idAccount: (path)  
     - parameter passwordInput: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func updatePasswordWithRequestBuilder(idAccount: String, passwordInput: UpdatePasswordInput) -> RequestBuilder<Void> {
        var path = "/api/accounts/{idAccount}/password"
        path = path.replacingOccurrences(of: "{idAccount}", with: "\(idAccount)", options: .literal, range: nil)
        let URLString = AuthentAPIAPI.basePath + path
        let parameters = passwordInput.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = AuthentAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
