//
// OtpsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class OtpsAPI: APIBase {
    /**
     Envoi un code OTP
     - parameter sendOTPInput: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendOTP(sendOTPInput: SendOTPInput, completion: @escaping ((_ data: SendOTPOutput?, _ error: ErrorResponse?) -> Void)) {
        sendOTPWithRequestBuilder(sendOTPInput: sendOTPInput).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Envoi un code OTP
     - POST /api/otps
     - 

     - examples: [{contentType=application/json, example={
  "identifiantTechnique" : "identifiantTechnique",
  "idOtp" : "idOtp",
  "codeOTP" : "codeOTP"
}}]
     - parameter sendOTPInput: (body)  
     - returns: RequestBuilder<SendOTPOutput> 
     */
    open class func sendOTPWithRequestBuilder(sendOTPInput: SendOTPInput) -> RequestBuilder<SendOTPOutput> {
        let path = "/api/otps"
        let URLString = AuthentAPIAPI.basePath + path
        let parameters = sendOTPInput.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SendOTPOutput>.Type = AuthentAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Valide le code OTP reçu
     - parameter idOTP: (path)  
     - parameter validateOTPInput: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func validateOTP(idOTP: String, validateOTPInput: ValidateOTPInput, completion: @escaping ((_ data: IdAccountOutput?, _ error: ErrorResponse?) -> Void)) {
        validateOTPWithRequestBuilder(idOTP: idOTP, validateOTPInput: validateOTPInput).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Valide le code OTP reçu
     - POST /api/otps/{idOTP}
     - 

     - examples: [{contentType=application/json, example={
  "idAccount" : "idAccount"
}}]
     - parameter idOTP: (path)  
     - parameter validateOTPInput: (body)  
     - returns: RequestBuilder<IdAccountOutput> 
     */
    open class func validateOTPWithRequestBuilder(idOTP: String, validateOTPInput: ValidateOTPInput) -> RequestBuilder<IdAccountOutput> {
        var path = "/api/otps/{idOTP}"
        path = path.replacingOccurrences(of: "{idOTP}", with: "\(idOTP)", options: .literal, range: nil)
        let URLString = AuthentAPIAPI.basePath + path
        let parameters = validateOTPInput.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IdAccountOutput>.Type = AuthentAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
