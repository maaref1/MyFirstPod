// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

public enum ErrorResponse : Error {
    case HttpError(statusCode: Int, data: Data?, error: Error)
    case DecodeError(response: Data?, decodeError: DecodeError)
}

open class Response<T> {
    open let statusCode: Int
    open let header: [String: String]
    open let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: HTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

public enum Decoded<ValueType> {
    case success(ValueType)
    case failure(DecodeError)
}

public extension Decoded {
    var value: ValueType? {
        switch self {
        case let .success(value):
            return value
        case .failure:
            return nil
        }
    }
}

public enum DecodeError {
    case typeMismatch(expected: String, actual: String)
    case missingKey(key: String)
    case parseError(message: String)
}

private var once = Int()
class Decoders {
    static fileprivate var decoders = Dictionary<String, ((AnyObject, AnyObject?) -> AnyObject)>()

    static func addDecoder<T>(clazz: T.Type, decoder: @escaping ((AnyObject, AnyObject?) -> Decoded<T>)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0, $1) as AnyObject }
    }

    static func decode<T>(clazz: T.Type, discriminator: String, source: AnyObject) -> Decoded<T> {
        let key = discriminator
        if let decoder = decoders[key], let value = decoder(source, nil) as? Decoded<T> {
            return value
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decode<T>(clazz: [T].Type, source: AnyObject) -> Decoded<[T]> {
        if let sourceArray = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in sourceArray {
                switch Decoders.decode(clazz: T.self, source: sourceValue, instance: nil) {
                case let .success(value):
                    values.append(value)
                case let .failure(error):
                    return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decode<T>(clazz: T.Type, source: AnyObject) -> Decoded<T> {
        switch Decoders.decode(clazz: T.self, source: source, instance: nil) {
    	    case let .success(value):
                return .success(value)
            case let .failure(error):
                return .failure(error)
        }
    }

    static open func decode<T: RawRepresentable>(clazz: T.Type, source: AnyObject) -> Decoded<T> {
        if let value = source as? T.RawValue {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "\(T.RawValue.self) matching a case from the enumeration \(T.self)", actual: String(describing: type(of: source))))
        }
    }

    static func decode<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject) -> Decoded<[Key:T]> {
        if let sourceDictionary = source as? [Key: AnyObject] {
            var dictionary = [Key:T]()
            for (key, value) in sourceDictionary {
                switch Decoders.decode(clazz: T.self, source: value, instance: nil) {
                case let .success(value):
                    dictionary[key] = value
                case let .failure(error):
                    return .failure(error)
                }
            }
            return .success(dictionary)
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decodeOptional<T: RawRepresentable>(clazz: T.Type, source: AnyObject?) -> Decoded<T?> {
        guard !(source is NSNull), source != nil else { return .success(nil) }
        if let value = source as? T.RawValue {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "\(T.RawValue.self) matching a case from the enumeration \(T.self)", actual: String(describing: type(of: source))))
        }
    }

    static func decode<T>(clazz: T.Type, source: AnyObject, instance: AnyObject?) -> Decoded<T> {
        initialize()
        if let sourceNumber = source as? NSNumber, let value = sourceNumber.int32Value as? T, T.self is Int32.Type {
            return .success(value)
        }
        if let sourceNumber = source as? NSNumber, let value = sourceNumber.int32Value as? T, T.self is Int64.Type {
     	    return .success(value)
        }
        if let intermediate = source as? String, let value = UUID(uuidString: intermediate) as? T, source is String, T.self is UUID.Type {
            return .success(value)
        }
        if let value = source as? T {
            return .success(value)
        }
        if let intermediate = source as? String, let value = Data(base64Encoded: intermediate) as? T {
            return .success(value)
        }

        let key = "\(T.self)"
        if let decoder = decoders[key], let value = decoder(source, instance) as? Decoded<T> {
           return value
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    //Convert a Decoded so that its value is optional. DO WE STILL NEED THIS?
    static func toOptional<T>(decoded: Decoded<T>) -> Decoded<T?> {
        return .success(decoded.value)
    }

    static func decodeOptional<T>(clazz: T.Type, source: AnyObject?) -> Decoded<T?> {
        if let source = source, !(source is NSNull) {
            switch Decoders.decode(clazz: clazz, source: source, instance: nil) {
            case let .success(value): return .success(value)
            case let .failure(error): return .failure(error)
            }
        } else {
            return .success(nil)
        }
    }
    
    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> Decoded<[T]?> where T: RawRepresentable {
        if let source = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in source {
                switch Decoders.decodeOptional(clazz: T.self, source: sourceValue) {
                case let .success(value): if let value = value { values.append(value) }
                case let .failure(error): return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> Decoded<[T]?> {
        if let source = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in source {
                switch Decoders.decode(clazz: T.self, source: sourceValue, instance: nil) {
                case let .success(value): values.append(value)
                case let .failure(error): return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject?) -> Decoded<[Key:T]?> {
        if let sourceDictionary = source as? [Key: AnyObject] {
            var dictionary = [Key:T]()
            for (key, value) in sourceDictionary {
                switch Decoders.decode(clazz: T.self, source: value, instance: nil) {
                case let .success(value): dictionary[key] = value
                case let .failure(error): return .failure(error)
                }
            }
            return .success(dictionary)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T: RawRepresentable, U: AnyObject>(clazz: T, source: AnyObject) -> Decoded<T?> where T.RawValue == U {
        if let value = source as? U {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "String", actual: String(describing: type(of: source))))
        }
    }


    private static var __once: () = {
        let formatters = [
            "yyyy-MM-dd",
            "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss'Z'",
            "yyyy-MM-dd'T'HH:mm:ss.SSS",
            "yyyy-MM-dd HH:mm:ss"
        ].map { (format: String) -> DateFormatter in
            let formatter = DateFormatter()
            formatter.locale = Locale(identifier: "en_US_POSIX")
            formatter.dateFormat = format
            return formatter
        }
        // Decoder for Date
        Decoders.addDecoder(clazz: Date.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Date> in
           if let sourceString = source as? String {
                for formatter in formatters {
                    if let date = formatter.date(from: sourceString) {
                        return .success(date)
                    }
                }
            }
            if let sourceInt = source as? Int {
                // treat as a java date
                return .success(Date(timeIntervalSince1970: Double(sourceInt / 1000) ))
            }
            if source is String || source is Int {
                return .failure(.parseError(message: "Could not decode date"))
            } else {
                return .failure(.typeMismatch(expected: "String or Int", actual: "\(source)"))
            }
        }

        // Decoder for ISOFullDate
        Decoders.addDecoder(clazz: ISOFullDate.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ISOFullDate> in
            if let string = source as? String,
               let isoDate = ISOFullDate.from(string: string) {
                return .success(isoDate)
            } else {
            	return .failure(.typeMismatch(expected: "ISO date", actual: "\(source)"))
            }
        }

        // Decoder for [AccountStateOutput]
        Decoders.addDecoder(clazz: [AccountStateOutput].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[AccountStateOutput]> in
            return Decoders.decode(clazz: [AccountStateOutput].self, source: source)
        }

        // Decoder for AccountStateOutput
        Decoders.addDecoder(clazz: AccountStateOutput.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<AccountStateOutput> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? AccountStateOutput() : instance as! AccountStateOutput
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["typeIdentifiant"] as AnyObject?) {
                
                case let .success(value): _result.typeIdentifiant = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "AccountStateOutput", actual: "\(source)"))
            }
        }
        // Decoder for [Erreur]
        Decoders.addDecoder(clazz: [Erreur].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[Erreur]> in
            return Decoders.decode(clazz: [Erreur].self, source: source)
        }

        // Decoder for Erreur
        Decoders.addDecoder(clazz: Erreur.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Erreur> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? Erreur() : instance as! Erreur
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?) {
                
                case let .success(value): _result.code = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject?) {
                
                case let .success(value): _result.message = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uuid"] as AnyObject?) {
                
                case let .success(value): _result.uuid = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "Erreur", actual: "\(source)"))
            }
        }
        // Decoder for [IdAccountOutput]
        Decoders.addDecoder(clazz: [IdAccountOutput].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[IdAccountOutput]> in
            return Decoders.decode(clazz: [IdAccountOutput].self, source: source)
        }

        // Decoder for IdAccountOutput
        Decoders.addDecoder(clazz: IdAccountOutput.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<IdAccountOutput> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? IdAccountOutput() : instance as! IdAccountOutput
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["idAccount"] as AnyObject?) {
                
                case let .success(value): _result.idAccount = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "IdAccountOutput", actual: "\(source)"))
            }
        }
        // Decoder for [Identifiant]
        Decoders.addDecoder(clazz: [Identifiant].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[Identifiant]> in
            return Decoders.decode(clazz: [Identifiant].self, source: source)
        }

        // Decoder for Identifiant
        Decoders.addDecoder(clazz: Identifiant.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Identifiant> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? Identifiant() : instance as! Identifiant
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["typeIdentifiant"] as AnyObject?) {
                
                case let .success(value): _result.typeIdentifiant = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["valeur"] as AnyObject?) {
                
                case let .success(value): _result.valeur = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cleSI"] as AnyObject?) {
                
                case let .success(value): _result.cleSI = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "Identifiant", actual: "\(source)"))
            }
        }
        // Decoder for [IdentifiantOutput]
        Decoders.addDecoder(clazz: [IdentifiantOutput].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[IdentifiantOutput]> in
            return Decoders.decode(clazz: [IdentifiantOutput].self, source: source)
        }

        // Decoder for IdentifiantOutput
        Decoders.addDecoder(clazz: IdentifiantOutput.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<IdentifiantOutput> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? IdentifiantOutput() : instance as! IdentifiantOutput
                switch Decoders.decodeOptional(clazz: [Identifiant].self, source: sourceDictionary["moyenCom"] as AnyObject?) {
                
                case let .success(value): _result.moyenCom = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "IdentifiantOutput", actual: "\(source)"))
            }
        }
        // Decoder for [LoginInput]
        Decoders.addDecoder(clazz: [LoginInput].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[LoginInput]> in
            return Decoders.decode(clazz: [LoginInput].self, source: source)
        }

        // Decoder for LoginInput
        Decoders.addDecoder(clazz: LoginInput.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<LoginInput> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? LoginInput() : instance as! LoginInput
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["motDePasse"] as AnyObject?) {
                
                case let .success(value): _result.motDePasse = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["identifiantTechnique"] as AnyObject?) {
                
                case let .success(value): _result.identifiantTechnique = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["identifiantPersonneSI"] as AnyObject?) {
                
                case let .success(value): _result.identifiantPersonneSI = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "LoginInput", actual: "\(source)"))
            }
        }
        // Decoder for [MoyenCom]
        Decoders.addDecoder(clazz: [MoyenCom].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[MoyenCom]> in
            return Decoders.decode(clazz: [MoyenCom].self, source: source)
        }

        // Decoder for MoyenCom
        Decoders.addDecoder(clazz: MoyenCom.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<MoyenCom> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? MoyenCom() : instance as! MoyenCom
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["valeur"] as AnyObject?) {
                
                case let .success(value): _result.valeur = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cleSI"] as AnyObject?) {
                
                case let .success(value): _result.cleSI = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["identifiant"] as AnyObject?) {
                
                case let .success(value): _result.identifiant = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?) {
                
                case let .success(value): _result.type = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "MoyenCom", actual: "\(source)"))
            }
        }
        // Decoder for [MoyenComItems]
        Decoders.addDecoder(clazz: [MoyenComItems].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[MoyenComItems]> in
            return Decoders.decode(clazz: [MoyenComItems].self, source: source)
        }

        // Decoder for MoyenComItems
        Decoders.addDecoder(clazz: MoyenComItems.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<MoyenComItems> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? MoyenComItems() : instance as! MoyenComItems
                switch Decoders.decodeOptional(clazz: [MoyenCom].self, source: sourceDictionary["moyenCom"] as AnyObject?) {
                
                case let .success(value): _result.moyenCom = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "MoyenComItems", actual: "\(source)"))
            }
        }
        // Decoder for [PasswordInput]
        Decoders.addDecoder(clazz: [PasswordInput].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[PasswordInput]> in
            return Decoders.decode(clazz: [PasswordInput].self, source: source)
        }

        // Decoder for PasswordInput
        Decoders.addDecoder(clazz: PasswordInput.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<PasswordInput> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? PasswordInput() : instance as! PasswordInput
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["motDePasse"] as AnyObject?) {
                
                case let .success(value): _result.motDePasse = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "PasswordInput", actual: "\(source)"))
            }
        }
        // Decoder for [SearchInput]
        Decoders.addDecoder(clazz: [SearchInput].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SearchInput]> in
            return Decoders.decode(clazz: [SearchInput].self, source: source)
        }

        // Decoder for SearchInput
        Decoders.addDecoder(clazz: SearchInput.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SearchInput> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SearchInput() : instance as! SearchInput
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): _result.id = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["captchaResponse"] as AnyObject?) {
                
                case let .success(value): _result.captchaResponse = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SearchInput", actual: "\(source)"))
            }
        }
        // Decoder for [SearchOutput]
        Decoders.addDecoder(clazz: [SearchOutput].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SearchOutput]> in
            return Decoders.decode(clazz: [SearchOutput].self, source: source)
        }

        // Decoder for SearchOutput
        Decoders.addDecoder(clazz: SearchOutput.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SearchOutput> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SearchOutput() : instance as! SearchOutput
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["identifiantTechnique"] as AnyObject?) {
                
                case let .success(value): _result.identifiantTechnique = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["statutOTP"] as AnyObject?) {
                
                case let .success(value): _result.statutOTP = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["identifiantPersonneSI"] as AnyObject?) {
                
                case let .success(value): _result.identifiantPersonneSI = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["nombreEchecs"] as AnyObject?) {
                
                case let .success(value): _result.nombreEchecs = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["dateDeblocageDemandeOTP"] as AnyObject?) {
                
                case let .success(value): _result.dateDeblocageDemandeOTP = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["roles"] as AnyObject?) {
                
                case let .success(value): _result.roles = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: MoyenComItems.self, source: sourceDictionary["moyensCom"] as AnyObject?) {
                
                case let .success(value): _result.moyensCom = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["statut"] as AnyObject?) {
                
                case let .success(value): _result.statut = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["marque"] as AnyObject?) {
                
                case let .success(value): _result.marque = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["collaborateur"] as AnyObject?) {
                
                case let .success(value): _result.collaborateur = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SearchOutput", actual: "\(source)"))
            }
        }
        // Decoder for [SendOTPInput]
        Decoders.addDecoder(clazz: [SendOTPInput].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SendOTPInput]> in
            return Decoders.decode(clazz: [SendOTPInput].self, source: source)
        }

        // Decoder for SendOTPInput
        Decoders.addDecoder(clazz: SendOTPInput.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SendOTPInput> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SendOTPInput() : instance as! SendOTPInput
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["marque"] as AnyObject?) {
                
                case let .success(value): _result.marque = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["identifiantTechnique"] as AnyObject?) {
                
                case let .success(value): _result.identifiantTechnique = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["identifiantPersonneSI"] as AnyObject?) {
                
                case let .success(value): _result.identifiantPersonneSI = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cleMoyenCom"] as AnyObject?) {
                
                case let .success(value): _result.cleMoyenCom = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SendOTPInput", actual: "\(source)"))
            }
        }
        // Decoder for [SendOTPOutput]
        Decoders.addDecoder(clazz: [SendOTPOutput].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SendOTPOutput]> in
            return Decoders.decode(clazz: [SendOTPOutput].self, source: source)
        }

        // Decoder for SendOTPOutput
        Decoders.addDecoder(clazz: SendOTPOutput.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SendOTPOutput> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SendOTPOutput() : instance as! SendOTPOutput
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["identifiantTechnique"] as AnyObject?) {
                
                case let .success(value): _result.identifiantTechnique = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["idOtp"] as AnyObject?) {
                
                case let .success(value): _result.idOtp = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["codeOTP"] as AnyObject?) {
                
                case let .success(value): _result.codeOTP = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SendOTPOutput", actual: "\(source)"))
            }
        }
        // Decoder for [SendTemporyPasswordInput]
        Decoders.addDecoder(clazz: [SendTemporyPasswordInput].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SendTemporyPasswordInput]> in
            return Decoders.decode(clazz: [SendTemporyPasswordInput].self, source: source)
        }

        // Decoder for SendTemporyPasswordInput
        Decoders.addDecoder(clazz: SendTemporyPasswordInput.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SendTemporyPasswordInput> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SendTemporyPasswordInput() : instance as! SendTemporyPasswordInput
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["marque"] as AnyObject?) {
                
                case let .success(value): _result.marque = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["identifiantTechnique"] as AnyObject?) {
                
                case let .success(value): _result.identifiantTechnique = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["identifiantPersonneSI"] as AnyObject?) {
                
                case let .success(value): _result.identifiantPersonneSI = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SendTemporyPasswordInput", actual: "\(source)"))
            }
        }
        // Decoder for [SendTemporyPasswordOutput]
        Decoders.addDecoder(clazz: [SendTemporyPasswordOutput].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SendTemporyPasswordOutput]> in
            return Decoders.decode(clazz: [SendTemporyPasswordOutput].self, source: source)
        }

        // Decoder for SendTemporyPasswordOutput
        Decoders.addDecoder(clazz: SendTemporyPasswordOutput.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SendTemporyPasswordOutput> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SendTemporyPasswordOutput() : instance as! SendTemporyPasswordOutput
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["identifiantTechnique"] as AnyObject?) {
                
                case let .success(value): _result.identifiantTechnique = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["motDePasse"] as AnyObject?) {
                
                case let .success(value): _result.motDePasse = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SendTemporyPasswordOutput", actual: "\(source)"))
            }
        }
        // Decoder for [UpdatePasswordInput]
        Decoders.addDecoder(clazz: [UpdatePasswordInput].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[UpdatePasswordInput]> in
            return Decoders.decode(clazz: [UpdatePasswordInput].self, source: source)
        }

        // Decoder for UpdatePasswordInput
        Decoders.addDecoder(clazz: UpdatePasswordInput.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<UpdatePasswordInput> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? UpdatePasswordInput() : instance as! UpdatePasswordInput
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["motDePasse"] as AnyObject?) {
                
                case let .success(value): _result.motDePasse = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cleSI"] as AnyObject?) {
                
                case let .success(value): _result.cleSI = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "UpdatePasswordInput", actual: "\(source)"))
            }
        }
        // Decoder for [ValidateOTPInput]
        Decoders.addDecoder(clazz: [ValidateOTPInput].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ValidateOTPInput]> in
            return Decoders.decode(clazz: [ValidateOTPInput].self, source: source)
        }

        // Decoder for ValidateOTPInput
        Decoders.addDecoder(clazz: ValidateOTPInput.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ValidateOTPInput> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ValidateOTPInput() : instance as! ValidateOTPInput
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["codeOTP"] as AnyObject?) {
                
                case let .success(value): _result.codeOTP = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ValidateOTPInput", actual: "\(source)"))
            }
        }
        // Decoder for [VerifyTemporyPasswordInput]
        Decoders.addDecoder(clazz: [VerifyTemporyPasswordInput].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[VerifyTemporyPasswordInput]> in
            return Decoders.decode(clazz: [VerifyTemporyPasswordInput].self, source: source)
        }

        // Decoder for VerifyTemporyPasswordInput
        Decoders.addDecoder(clazz: VerifyTemporyPasswordInput.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<VerifyTemporyPasswordInput> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? VerifyTemporyPasswordInput() : instance as! VerifyTemporyPasswordInput
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["identifiantTechnique"] as AnyObject?) {
                
                case let .success(value): _result.identifiantTechnique = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["identifiantPersonneSI"] as AnyObject?) {
                
                case let .success(value): _result.identifiantPersonneSI = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["motDePasseProvisoire"] as AnyObject?) {
                
                case let .success(value): _result.motDePasseProvisoire = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "VerifyTemporyPasswordInput", actual: "\(source)"))
            }
        }
    }()

    static fileprivate func initialize() {
        _ = Decoders.__once
    }
}
